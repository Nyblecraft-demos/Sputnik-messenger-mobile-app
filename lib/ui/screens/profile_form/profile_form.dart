import 'package:cubit_form/cubit_form.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:sputnik/config/brand_colors.dart';import 'package:sputnik/config/brand_theme.dart';import 'package:sputnik/config/get_it_config.dart';import 'package:sputnik/logic/cubits/authentication/authentication_cubit.dart';import 'package:sputnik/logic/forms/profile/profile.dart';import 'package:sputnik/ui/components/brand_back_button/brand_back_button.dart';import 'package:sputnik/ui/components/brand_button/brand_button.dart';import 'package:sputnik/ui/components/brand_icons/brand_icons.dart';import 'package:sputnik/ui/components/brand_inputs/brand_inputs.dart';import 'package:sputnik/ui/components/image_picker.dart';import 'package:sputnik/ui/helpers/unfocus/unfocus.dart';import 'package:sputnik/utils/help_functions.dart';class ProfileForm extends StatelessWidget {  const ProfileForm({    Key? key,  }) : super(key: key);  @override  Widget build(BuildContext context) {    final bool canPop = canPopHelper(context);    double textFieldHieght = 48;    return BlocProvider(      create: (_) => ProfileFormCubit(authCubit: context.read<AuthenticationCubit>()),      child: Builder(        builder: (context) {          var theme = context.watch<BrandTheme>();          var form = context.watch<ProfileFormCubit>();          return BlocListener<ProfileFormCubit, FormCubitState>(            listener: (context, state) {              if (state.isSubmitted) {                if (canPop) {                  Navigator.of(context).pop();                }              }            },            child: UnfocusOnTap(              child: Scaffold(                  appBar: canPop                      ? AppBar(                          title: Text('Изменить профиль'),                          leading: BrandBackButton(),                          elevation: 0,                        )                      : null,                  backgroundColor: CupertinoColors.systemGrey6,                  resizeToAvoidBottomInset: true,                  body: SafeArea(                    top: false,                    minimum: EdgeInsets.symmetric(vertical: 36),                    child: SingleChildScrollView(                      clipBehavior: Clip.none,                      child: Column(                          //mainAxisSize: MainAxisSize.max,                          mainAxisAlignment: MainAxisAlignment.center,                          children: [                            Padding(                              padding: EdgeInsets.only(top: 36, bottom: 16),                              child: BlocBuilder<FieldCubit, FieldCubitState>(                                bloc: form.avatar,                                builder: (context, state) => avatarWidget(context, state, form, width: 150, height: 150),                              ),                            ),                            Padding(                              padding: EdgeInsets.symmetric(horizontal: 24, vertical: 20),                              child: Container(                                  decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(13)),                                  child: Column(                                    children: [                                      BrandInputs.withLabel(fieldCubit: form.name, label: 'Имя', height: textFieldHieght, theme: theme),                                      Padding(                                        padding: EdgeInsets.symmetric(horizontal: 16),                                        child: Container(height: 0.5, color: CupertinoColors.systemGrey4),                                      ),                                      BrandInputs.withLabel(fieldCubit: form.surname, label: 'Фамилия (опционально)', height: textFieldHieght, theme: theme),                                    ],                                  )),                            ),                            // Padding(                            //   padding: EdgeInsets.only(left: 24, right: 24, bottom: 36),                            //   child: Container(                            //       decoration: BoxDecoration(                            //           color: Colors.white,                            //           borderRadius: BorderRadius.circular(13)                            //       ),                            //       child: Column(                            //         children: [                            //           BrandInputs.withLabel(                            //               fieldCubit: form.email,                            //               label: 'Электронная почта (опционально)',                            //               height: textFieldHieght,                            //               backgroundColor: Colors.white                            //           ),                            //           Padding(                            //             padding: EdgeInsets.symmetric(horizontal: 16),                            //             child: Container(height: 0.5, color: CupertinoColors.systemGrey4),                            //           ),                            //           BrandInputs.withLabel(                            //               fieldCubit: form.nickname,                            //               label: 'Никнейм (опционально)',                            //               height: textFieldHieght,                            //               backgroundColor: Colors.white                            //           ),                            //         ],                            //       )                            //   ),                            // ),                            Padding(                              padding: EdgeInsets.symmetric(horizontal: 24, vertical: 0),                              child: BrandButton.blue(                                text: 'Сохранить',                                onPressed: () => form.trySubmit(),                              ),                            )                          ]),                    ),                  )),            ),          );        },      ),    );  }  static Widget avatarWidget(BuildContext context, FieldCubitState state, ProfileFormCubit form, {double width = 100, double height = 100}) {    debugPrint('avatar widget:  image = ${state.value}');//    bool hasUrl = true;    final avatar = getIt.get<ChatService>().currentUser.avatar;    bool hasUrl = !(avatar == '' || avatar == null || avatar == 'null');    print(form.avatar.state.value);    return GestureDetector(      onTap: () => ImagePicker.show(context, form),      child: Container(          width: width,          height: height,          decoration: BoxDecoration(            color: CupertinoColors.quaternarySystemFill,            shape: BoxShape.circle,            image: hasUrl ? DecorationImage(image: Image.network(avatar).image, fit: BoxFit.cover) : null,          ),          child: !hasUrl              ? Container(                  width: width,                  height: height,                  alignment: Alignment.center,                  decoration: BoxDecoration(                      color: CupertinoColors.quaternarySystemFill,                      //borderRadius: BorderRadius.circular(50),                      shape: BoxShape.circle),                  child: Center(child: Icon(CupertinoIcons.person_solid, color: CupertinoColors.secondaryLabel, size: width / 2.618)),                )              : null),    );  }}//// class EditProfileForm extends StatelessWidget {//   const EditProfileForm({//     Key? key,//   }) : super(key: key);////   @override//   Widget build(BuildContext context) {//     final bool canPop = canPopHelper(context);////     return BlocProvider(//       create: (_) => EditProfileFormCubit(context.read<AuthenticationCubit>()),//       child: Builder(//         builder: (context) {//           var form = context.watch<EditProfileFormCubit>();//           return BlocListener<EditProfileFormCubit, FormCubitState>(//             listener: (context, state) {//               if (state.isSubmitted) {//                 if (canPop) {//                   Navigator.of(context).pop();//                 }//               }//             },//             child: SafeArea(//               child: Scaffold(//                 resizeToAvoidBottomInset: true,//                 body: SingleChildScrollView(//                   child: Column(//                     children: [//                       Container(//                         height: MediaQuery.of(context).size.width,//                         child: Stack(//                           alignment: Alignment.center,//                           children: [//                             BlocBuilder<FieldCubit, FieldCubitState>(//                               bloc: form.avatar,//                               builder: (context, state) {//                                 return ProfileFormImage(src: state.value);//                               },//                             ),//                             if (canPop)//                               Align(//                                 alignment: Alignment.topLeft,//                                 child: ConstrainedBox(//                                   constraints: BoxConstraints.tightFor(//                                     width: kToolbarHeight,//                                     height: kToolbarHeight,//                                   ),//                                   child: BrandBackButton(),//                                 ),//                               ),//                             BlocBuilder<FieldCubit, FieldCubitState>(//                               bloc: form.avatar,//                               builder: (context, state) {//                                 return PhotoButton(//                                   hasImage: state.value != null,//                                   onPressed: () async {//                                     var url = await Camera.takePhoto();//                                     form.avatar.setValue(url);//                                   },//                                 );//                               },//                             ),//                           ],//                         ),//                       ),//                       Padding(//                         padding: paddingV24H0,//                         child: Column(//                           children: [//                             BrandInputs.withLabel(//                               fieldCubit: form.name,//                               label: 'Никнейм',//                             ),//                             SizedBox(height: 30),//                             BrandButton.blue(//                               text: 'Сохранить измнения',//                               isCapitalized: true,//                               onPressed: () {//                                 form.trySubmit();//                               },//                             )//                           ],//                         ),//                       )//                     ],//                   ),//                 ),//               ),//             ),//           );//         },//       ),//     );//   }// }class ProfileFormImage extends StatelessWidget {  const ProfileFormImage({    Key? key,    required this.src,  }) : super(key: key);  final String? src;  @override  Widget build(BuildContext context) {    debugPrint('profileFormImage:  src = $src');    return Container(      decoration: BoxDecoration(        color: BrandColors.grey4, //Theme.of(context).brightness == Brightness.dark ? BrandColors.black3 : BrandColors.grey4,        image: src != null || src != ''            ? DecorationImage(                colorFilter: new ColorFilter.mode(                  Colors.black.withOpacity(0.2),                  BlendMode.darken,                ),                image: NetworkImage(src!),                fit: BoxFit.cover,              )            : null,      ),    );  }}class PhotoButton extends StatelessWidget {  const PhotoButton({    Key? key,    required this.onPressed,    required this.hasImage,  }) : super(key: key);  final bool hasImage;  final VoidCallback onPressed;  @override  Widget build(BuildContext context) {    return RawMaterialButton(      onPressed: onPressed,      elevation: 0,      highlightElevation: 0,      child: Container(        height: 70,        width: 70,        decoration: BoxDecoration(          borderRadius: BorderRadius.circular(35.0),          border: Border.all(            color: hasImage                ? BrandColors.white                : Theme.of(context).brightness == Brightness.dark                    ? BrandColors.white                    : BrandColors.black3,            width: 1.0,          ),        ),        child: Padding(          padding: EdgeInsets.only(bottom: 2),          child: Icon(            BrandIcons.camera,            size: 30.0,            color: hasImage                ? BrandColors.white                : Theme.of(context).brightness == Brightness.dark                    ? BrandColors.grey4                    : BrandColors.black3,          ),        ),      ),      shape: CircleBorder(),    );  }}